SurfAvg_merged <- SurfAvg_new %>%
# use the pivot_longer function to transpose x and y variables
pivot_longer(L_bankssts_surfavg:R_insula_surfavg, names_to = "ROI", values_to = "SurfAvg") %>%
# use the mutate() function to create columns with new names
mutate(hemi=str_sub(ROI, 1, 1),
roi=str_sub(ROI, 2,-1)) %>%
# group_by() EXPLAIN
group_by(participant, roi) %>%
# compute the mean of L and R cortical thickness
summarise(M=mean(SurfAvg)) %>%
# transform back to wide format with features as column headings
pivot_wider(id_cols = participant, names_from = roi,
# watch out for the names_prefix, in this case do not need to add another _ after M
values_from=M, names_prefix = "M") %>%
# Re-order the columns of SurfAvg to match example by Han et al., 2020
relocate(M_insula_surfavg, .after = M_transversetemporal_surfavg) %>%
relocate(M_frontalpole_surfavg, .before=M_temporalpole_surfavg)
SurfAvg_merged
##### Modify LandRvolumes.csv #####
# work with the filtered data frame
LandRvolumes_merged <- LandRvolumes_new %>%
# use the pivot_longer function to transpose x and y variables
pivot_longer(LLatVent:Raccumb, names_to = "ROI", values_to = "Volume") %>%
# use the mutate() function to create columns with new names
mutate(hemi=str_sub(ROI, 1, 1),
roi=str_sub(ROI, 2,-1)) %>%
# group_by() EXPLAIN
group_by(participant, roi) %>%
# compute the mean of L and R volumes
summarise(M=mean(Volume)) %>%
# transform back to wide format with features as column headings
pivot_wider(id_cols = participant, names_from = roi, values_from=M, names_prefix = "M") %>%
# rename the columns to match examples in supplementary table 5 (Han et al., 2020)
# https://www.datanovia.com/en/lessons/rename-data-frame-columns-in-r/
rename(Mvent = MLatVent)
# Re-order the columns of LandRvolumes_merged to match example by Han et al., 2020
col_order_volumes <- c("participant", "Mvent", "Mthal", "Mcaud", "Mput", "Mpal", "Mhippo", "Mamyg", "Maccumb")
# Create a reordered data frame
Mvolumes <- LandRvolumes_merged[, col_order_volumes]
Mvolumes
##### Modify CorticalMeasuresENIGMA_ThickAvg.csv #####
# Average the left and right cortical thickness values
MThickAvg <- ThickAvg_new %>%
# use the pivot_longer function to transpose x and y variables
pivot_longer(L_bankssts_thickavg:R_parahippocampal_thickavg, names_to = "ROI", values_to = "ThickAvg") %>%
# use the mutate() function to create columns with new names
mutate(hemi=str_sub(ROI, 1, 1),
roi=str_sub(ROI, 2,-1)) %>%
group_by(participant, roi) %>%
# compute the mean of L and R cortical thickness
summarise(M=mean(ThickAvg)) %>%
# transform back to wide format with features as column headings
pivot_wider(id_cols = participant, names_from = roi,
# watch out for the names_prefix, in this case do not need to add another _ after M
values_from=M, names_prefix = "M") %>%
# Re-order the columns of ThickAvg to match example by Han et al., 2020
relocate(M_insula_thickavg, .after = M_transversetemporal_thickavg) %>%
relocate(M_frontalpole_thickavg, .before=M_temporalpole_thickavg)
MThickAvg
##### Modify CorticalMeasuresENIGMASurfAvg.csv #####
# Mean cortical surface area
MSurfAvg <- SurfAvg_new %>%
# use the pivot_longer function to transpose x and y variables
pivot_longer(L_bankssts_surfavg:R_insula_surfavg, names_to = "ROI", values_to = "SurfAvg") %>%
# use the mutate() function to create columns with new names
mutate(hemi=str_sub(ROI, 1, 1),
roi=str_sub(ROI, 2,-1)) %>%
# group_by() EXPLAIN
group_by(participant, roi) %>%
# compute the mean of L and R cortical thickness
summarise(M=mean(SurfAvg)) %>%
# transform back to wide format with features as column headings
pivot_wider(id_cols = participant, names_from = roi,
# watch out for the names_prefix, in this case do not need to add another _ after M
values_from=M, names_prefix = "M") %>%
# Re-order the columns of SurfAvg to match example by Han et al., 2020
relocate(M_insula_surfavg, .after = M_transversetemporal_surfavg) %>%
relocate(M_frontalpole_surfavg, .before=M_temporalpole_surfavg)
MSurfAvg
male_merged_df1 <- merge(Mvolumes, MThickAvg, by="participant")
male_merged_df1
male_merged_df2 <- merge(male_merged_df1, MSurfAvg, by="participant")
male_merged_df2
##### add the ICV column back in and remove participant #####
myvars <- c("participant", "ICV")
ICV_df <- LandRvolumes_original[myvars]
ICV_df
##### add the ICV column back in and remove participant #####
myvars <- c("participant", "ICV")
ICV_df <- LandRvolumes_original[myvars] %>%
# remove any rows with values of "0" from ICV df
filter_if(is.numeric, any_vars(. != 0))
ICV_df
##### add the ICV column back in and remove participant #####
myvars <- c("participant", "ICV")
ICV_df <- LandRvolumes_original[myvars] %>%
# remove any rows with values of "0" from ICV df
filter_if(is.numeric, any_vars(. != 0))
ICV_df
# merge ICV data frame with the merged data frame from above containing volumes, cortical thickness, and surface area
male_merged <- merge(ICV_df, male_merged_df2, by="participant")
# create a new df that excludes the participant column
# source: https://www.statmethods.net/management/subset.html
male_no_participant <- male_merged[c(-1)]
male_no_participant
##### add the ICV column back in and remove participant #####
myvars <- c("participant", "ICV")
ICV_df <- LandRvolumes_original[myvars] %>%
# remove any rows with values of "0" from ICV df
filter_if(is.numeric, any_vars(. != 0))
ICV_df
# merge ICV data frame with the merged data frame from above containing volumes, cortical thickness, and surface area
male_merged <- merge(ICV_df, male_merged_df2, by="participant")
# create a new df that excludes the participant column
# source: https://www.statmethods.net/management/subset.html
male_no_ID <- male_merged[c(-1)]
male_no_ID
##### Export final data frame to csv #####
# make sure the file path provided includes folders that actually exist (ENIGMA vs ENIGMA_data)
write.csv(male_no_ID, file ='/external/rprshnas01/tigrlab/scratch/csun/ENIGMA_data/data/male_brainchart.csv', row.names=FALSE)
##### Export final data frame to csv #####
# make sure the file path provided includes folders that actually exist (ENIGMA vs ENIGMA_data)
write.csv(male_no_ID, file ='/external/rprshnas01/tigrlab/scratch/csun/ENIGMA_data/data/processed/male_averaged.csv', row.names=FALSE)
View(LandRvolumes_new)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
female_enigma <- read_csv("data/processed/female_enigma_brainage.csv")
female_enigma <- read_csv("/external/rprshnas01/tigrlab/scratch/csun/ENIGMA_data/data/processed/female_enigma_brainage.csv")
female_enigma
female_enigma <- read_delim("/external/rprshnas01/tigrlab/scratch/csun/ENIGMA_data/data/processed/female_enigma_brainage.csv",
# specify the delimiter as tabs
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
female_enigma
# female processed ENIGMA brain age csv
female_enigma <- read_delim("/external/rprshnas01/tigrlab/scratch/csun/ENIGMA_data/data/processed/female_enigma_brainage.csv",
# specify the delimiter as tabs
delim = "\t", escape_double = FALSE,
col_types = cols(...1 = col_skip()),
trim_ws = TRUE)
female_enigma
# male processed ENIGMA brainage csv
male_enigma <- read_delim("/external/rprshnas01/tigrlab/scratch/csun/ENIGMA_data/data/processed/male_enigma_brainage.csv",
delim = "\t", escape_double = FALSE, # specify the delimiter as tabs
col_types = cols(...1 = col_skip()), # remove the first row header column
trim_ws = TRUE)
male_enigma
View(female_enigma)
f_LandRvolumes <- read_csv("/external/rprshnas01/tigrlab/scratch/csun/ENIGMA_data/data/raw/female_LandRvolumes-original.csv")
View(f_LandRvolumes)
m_LandRvolumes <- read_csv("/external/rprshnas01/tigrlab/scratch/csun/ENIGMA_data/data/raw/male_LandRvolumes-original.csv")
View(m_LandRvolumes)
m_LandRvolumes %>%
filter(!grepl("^0$", LLatVent)) # Remove any rows with 0 (null) values for features
View(m_LandRvolumes)
m_LandRvolumes %>%
filter(!grepl("^0$", LLatVent ))
m_LandRvolumes_new <- m_LandRvolumes %>%
filter_if(is.numeric, any_vars(. != 0.0)) # Remove any rows with 0 (null) values for features
m_LandRvolumes_new
m_LandRvolumes_new <- m_LandRvolumes %>%
filter_if(is.numeric, any_vars(. != 0.0)) %>% # Remove any rows with 0 (null) values for features
# use the pivot_longer function to transpose x and y variables
pivot_longer(LLatVent:Raccumb, names_to = "ROI", values_to = "Volume") %>%
# use the mutate() function to create columns with new names
mutate(hemi=str_sub(ROI, 1, 1),
roi=str_sub(ROI, 2,-1)) %>%
# group_by() EXPLAIN
group_by(participant, roi) %>%
# compute the mean of L and R volumes
summarise(M=mean(Volume)) %>%
# transform back to wide format with features as column headings
pivot_wider(id_cols = participant, names_from = roi, values_from=M, names_prefix = "M") %>%
# rename the columns to match examples in supplementary table 5 (Han et al., 2020)
# https://www.datanovia.com/en/lessons/rename-data-frame-columns-in-r/
rename(Mvent = MLatVent)
m_LandRvolumes_new
View(male_enigma)
View(m_LandRvolumes_new)
myvars <- c("participant", "ICV", "sex")
ICV_df <- m_LandRvolumes[myvars] %>%
# remove any rows with values of "0" from ICV df
filter_if(is.numeric, any_vars(. != 0))
ICV_df
myvars <- c("participant", "ICV", "sex")
m_ICV_df <- m_LandRvolumes[myvars] %>%
# remove any rows with values of "0" from ICV df
filter_if(is.numeric, any_vars(. != 0))
m_ICV_df
m_merged <- merge(m_ICV_df, m_LandRvolumes_new, by="participant")
m_merged
f_LandRvolumes_new <- f_LandRvolumes %>%
filter_if(is.numeric, any_vars(. != 0.0)) %>% # Remove any rows with 0 (null) values for features
# use the pivot_longer function to transpose x and y variables
pivot_longer(LLatVent:Raccumb, names_to = "ROI", values_to = "Volume") %>%
# use the mutate() function to create columns with new names
mutate(hemi=str_sub(ROI, 1, 1),
roi=str_sub(ROI, 2,-1)) %>%
# group_by() EXPLAIN
group_by(participant, roi) %>%
# compute the mean of L and R volumes
summarise(M=mean(Volume)) %>%
# transform back to wide format with features as column headings
pivot_wider(id_cols = participant, names_from = roi, values_from=M, names_prefix = "M") %>%
# rename the columns to match examples in supplementary table 5 (Han et al., 2020)
# https://www.datanovia.com/en/lessons/rename-data-frame-columns-in-r/
rename(Mvent = MLatVent)
f_LandRvolumes_new
# add ICV and sex column back to dataframe
myvars <- c("participant", "ICV", "sex")
f_ICV_df <- f_LandRvolumes[myvars] %>%
# remove any rows with values of "0" from ICV df
filter_if(is.numeric, any_vars(. != 0))
f_ICV_df
f_merged <- merge(f_ICV_df, f_LandRvolumes_new, by="participant")
f_merged
View(f_merged)
enigma_all <- rbind(female_enigma, male_enigma)
enigma_all
View(enigma_all)
volumes_all <-rbind(f_merged, m_merged)
volumes_all
enigma_df <- merge(volumes_all, enigma_all, by="Mvent")
# HOW to edit this so that merge by multiple columns?
enigma_df
View(volumes_all)
knitr::opts_chunk$set(echo = TRUE)
enigma_df <- merge(volumes_all, enigma_all, by="Mvent",
no.dups = TRUE)
# HOW to edit this so that merge by multiple columns?
enigma_df
enigma_df <- merge(volumes_all, enigma_all,
by.x="Mvent", by.y="Mvent",
no.dups = TRUE)
# HOW to edit this so that merge by multiple columns?
enigma_df
enigma_merged <- merge(volumes_all, enigma_all,
by = c('MVent', 'ICV', 'Mthal'))
common_columns <- intersect(names(volumes_all), names(enigma_all))
common_columns
by_cols <- setdiff(common_columns, c('sex', 'participant ID'))
enigma_merged <- merge(volumes_all, enigma_all, by = by_cols)
enigma_merged
enigma_df <- cbind(volumes_all[c('sex', 'participant ID')], merged_df)
enigma_df <- cbind(volumes_all[c('sex', 'participant ID')], enigma_merged)
enigma_df <- cbind(volumes_all[c('sex', 'participant ID')], enigma_all)
common_columns <- intersect(names(volumes_all), names(enigma_all))
common_columns
by_cols <- setdiff(common_columns, c('sex', 'participant'))
enigma_merged <- merge(volumes_all, enigma_all, by = by_cols)
enigma_merged
enigma_df <- cbind(volumes_all[c('participant', 'sex')], enigma_merged)
enigma_df
enigma_merged
View(enigma_df)
View(enigma_df)
View(f_LandRvolumes)
enigma_df <-  enigma_merged[order(enigma_merged$participant),]
enigma_df
View(f_ICV_df)
enigma_df <-  enigma_merged[order(enigma_merged$participant),] %>% relocate(participant, .before = ICV) %>%
relocate(sex, .after = participant) %>% relocate(age_prediction, .after = sex)
enigma_df
View(ICV_df)
View(ICV_df)
brainchart_demo <- read_csv("/external/rprshnas01/tigrlab/scratch/csun/ENIGMA_data/data/raw/brainchart_demo.csv")
brainchart_demo
View(brainchart_demo)
View(enigma_df)
brainchart_demo_ID <- gsub("TAY_01", "sub-", brainchart_demo$participant) %>% gsub("_CMH_","CMH", brainchart_demo$participant )
brainchart_demo_ID
brainchart_demo_ID <- gsub("TAY_01", "sub-", brainchart_demo$participant)
View(brainchart_demo)
brainchart_demo_ID$participant <- gsub("TAY_01", "sub-", brainchart_demo$participant)
View(brainchart_demo_ID)
brainchart_demo$participant <- gsub("TAY_01", "sub-", brainchart_demo$participant)
brainchart_demo <- read_csv("/external/rprshnas01/tigrlab/scratch/csun/ENIGMA_data/data/raw/brainchart_demo.csv")
brainchart_demo
brainchart_demo$participant <- as.character(brainchart_demo$participant)
brainchart_demo$participant <- gsub("TAY_01", "sub-", brainchart_demo$participant)
brainchart_demo$participant <- gsub("TAY_01", "sub-", brainchart_demo$participant)
brainchart_demo
brainchart_demo$participant <- gsub("TAY01", "sub-", brainchart_demo$participant)
brainchart_demo
brainchart_demo$participant <- gsub("TAY01", "sub-", brainchart_demo$participant)
brainchart_demo <- gsub("_CMH_","CMH", brainchart_demo$participant)
brainchart_demo
brainchart_demo$participant <- gsub("TAY01", "sub-", brainchart_demo$participant)
brainchart_demo <- read_csv("/external/rprshnas01/tigrlab/scratch/csun/ENIGMA_data/data/raw/brainchart_demo.csv")
brainchart_demo
brainchart_demo$participant <- gsub("TAY01", "sub-", brainchart_demo$participant)
brainchart_demo$participant <- gsub("_CMH_","CMH", brainchart_demo$participant)
brainchart_demo
View(brainchart_demo)
enigma_final <- merge(enigma_df, brainchart_demo[c('participant', 'Age', 'dx')], by = 'participant', all.x = TRUE)
enigma_final
View(enigma_final)
enigma_final %>%
relocate(Age, .before = age_prediction) %>%
relocate(dx, .after = sex)
enigma_final
enigma_final <- merge(enigma_df, brainchart_demo[c('participant', 'Age', 'dx')], by = 'participant', all.x = TRUE)
enigma_final %>%
relocate(Age, .before = age_prediction) %>%
relocate(dx, .after = sex)
enigma_final
enigma_final <- merge(enigma_df, brainchart_demo[c('participant', 'Age', 'dx')], by = 'participant', all.x = TRUE)
enigma_final
enigma_final <- enigma_final %>%
relocate(Age, .before = age_prediction) %>%
relocate(dx, .after = sex)
enigma_final
View(enigma_final)
write.csv(enigma_final, file ='/external/rprshnas01/tigrlab/scratch/csun/ENIGMA_data/data/processed/enigma_final.csv', row.names=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(readr)
enigma_final <- read_csv("data/processed/enigma_final.csv")
View(enigma_final)
enigma_final <- read_csv("data/processed/enigma_final.csv")
enigma_final <- read_csv("/external/rprshnas01/tigrlab/scratch/csun/ENIGMA_data/data/processed/enigma_final.csv")
demo_vars <- c("participant", "sex", "dx", "Age", "age_prediction")
enigma_demo <- enigma_final[myvars]
enigma_demo <- enigma_final[demo_vars]
enigma_demo
300/0.05
knitr::opts_chunk$set(echo = TRUE)
enigma_BAG <- enigma_demo %>% mutate(BAG = age_prediction - Age)
enigma_BAG
na_count <- sum(is.na(enigma_demo$Age))
na_count
na_count2 <- sum(is.na(enigma_final$Age))
na_count2
View(enigma_demo)
na_count_dx <- sum(is.na(enigma_final$dx))
na_count_dx
na_count_sex <- sum(is.na(enigma_final$sex))
na_count_sex
library(ggplot2)
ggplot(data = enigma_BAG) +
geom_point(mapping = aes(x = Age, y = BAG))
ggplot(data = enigma_BAG) +
geom_point(mapping = aes(x = sex, y = BAG))
ggplot(data = enigma_BAG) +
geom_point(mapping = aes(x = dx, y = BAG))
dx_plot <- ggplot(data = enigma_BAG) +
geom_point(mapping = aes(x = dx, y = BAG))
dx_plot
geom_boxplot(mapping = aes(x = dx, y = BAG)) + coord_flip()
ggplot(data = enigma_BAG) +
geom_boxplot(mapping = aes(x = dx, y = BAG)) + coord_flip()
enigma_dx <- enigma_BAG[complete.cases(enigma_BAG$dx), ]
enigma_dx
ggplot(data = enigma_dx) +
geom_boxplot(mapping = aes(x = dx, y = BAG)) + coord_flip()
ggplot(data = enigma_dx) +
geom_boxplot(mapping = aes(x = dx, y = age_prediction)) + coord_flip()
ggplot(data = enigma_dx) +
geom_boxplot(mapping = aes(x = Age, y = age_prediction, colour = dx)) + coord_flip()
ggplot(data = enigma_dx) +
geom_point(mapping = aes(x = Age, y = age_prediction, colour = dx)) + coord_flip()
t.test(BAG ~ dx, data = enigma_dx)
t.test(BAG ~ dx, alternative = "two.sided", data = enigma_dx)
t.test(BAG ~ sex, alternative = "two.sided", data = enigma_dx)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
enigma_final <- read_csv("/external/rprshnas01/tigrlab/scratch/csun/ENIGMA_data/data/processed/enigma_final.csv")
demo_vars <- c("participant", "sex", "dx", "Age", "age_prediction") # list of demographic variables
enigma_demo <- enigma_final[demo_vars]
enigma_demo
enigma_BAG <- enigma_demo %>% mutate(BAG = age_prediction - Age)
enigma_BAG
enigma_dx <- enigma_BAG[complete.cases(enigma_BAG$dx), ]
enigma_dx
clinical_df <- read_csv("/KIMEL/tigrlab/scratch/csun/ENIGMA_data/data/raw/brainage_clinical_data.csv")
clinical_df
View(enigma_BAG)
clinical_df$subject_id <- gsub("TAY01", "sub-", clinical_df$subject_id)
# remove the two underscores surrounding CMH
clinical_df$subject_id <- gsub("_CMH_","CMH", clinical_df$subject_id)
# rename the subject_id column heading 'participant' to match centiles_df
clinical_df <- clinical_df %>% # need to specify where to store the new df
rename(participant = subject_id)
clinical_df
clinical_df %>% select(ends_with("disorders"))
clinical_df
list_disorders <- list(colnames(clinical_df %>% select(ends_with("disorders"))))
list_disorders
class(list_disorders)
list_disorders <- unlist(list_disorders, use.names=FALSE)
# check type again
class(list_disorders)
sapply(clinical_df, function(x) sum(is.na(x)))
clinical_new <- clinical_df %>%
# replace NA values in the 12 disorder columns
# list_disorders has been passed through the unlist() function so it is no longer a list
mutate_at(c(list_disorders), ~replace_na(., 0))
# must put in the value 0 rather than the string "0" because the disorders columns are type "dbl" (numeric)
clinical_new
clinical_plus <- mutate(clinical_new, total_dx = (rowSums(clinical_new[, list_disorders])))
clinical_plus
enigma_demo <- merge(enigma_demo,
clinical_plus[c('participant', 'total_dx')], by ='participant', all.x = TRUE)
# merge by 'participant' column so that only the total disorders for participants in enigma_demo AND clinical_df are merged
enigma_demo
clinical_ASD <- filter(clinical_df, !is.na(asd_info_asd_ksads))
# there are 150 participants who have KSADS info, this suggests that one of the participants whose scan age was < 18 y/o does not have info for KSADS (which is why filtering for scan age < 18 returned 151 participants, whereas filtering for KSADS returned only 150)
clinical_ASD
# replace the long strings with "Yes" and "No"
clinical_ASD$asd_info_asd_ksads <- gsub("Yes - participant met criteria for ASD on the KSADS", "Yes", clinical_ASD$asd_info_asd_ksads)
clinical_ASD$asd_info_asd_ksads <- gsub("No - participant did not meet criteria for ASD on the KSADS", "No", clinical_ASD$asd_info_asd_ksads)
# replace the "insufficient info..." string with the string "No"
clinical_ASD$asd_info_asd_ksads <- gsub("Insufficient information - Participant was sub-threshold or query for ASD on the KSADS", "No", clinical_ASD$asd_info_asd_ksads)
# group participants that did not have enough information for ASD diagnosis using KSADS in the No ASD group
# rename the 'asd_info_asd_ksads' column heading to "ASD_dx"
clinical_ASD <- clinical_ASD %>% rename(ASD_dx = asd_info_asd_ksads)
clinical_ASD
enigma_ASD <- merge(enigma_demo,
clinical_ASD[c('participant', 'ASD_dx')], by ='participant') # take the natural join so that only participants with data in both data frames (enigma_ASD and clinical_ASD) are added to the new data frame
enigma_ASD
View(enigma_final)
View(enigma_BAG)
enigma_BAG <- merge(enigma_BAG,
clinical_plus[c('participant', 'total_dx')], by ='participant', all.x = TRUE)
# merge by 'participant' column so that only the total disorders for participants in enigma_BAG AND clinical_df are merged
enigma_BAG
View(enigma_demo)
# Load ENIGMA csv that contains age predictions, sex, dx, chronological age
enigma_final <- read_csv("/external/rprshnas01/tigrlab/scratch/csun/ENIGMA_data/data/processed/enigma_final.csv")
# Create condensed version of data frame containing only demographic variables
demo_vars <- c("participant", "sex", "dx", "Age", "age_prediction") # list of demographic variables
enigma_demo <- enigma_final[demo_vars]
enigma_demo
#### Load and tidy TAY clinical data ####
# full TAY clinical data
clinical_df <- read_csv("/KIMEL/tigrlab/scratch/csun/ENIGMA_data/data/raw/brainage_clinical_data.csv")
clinical_df
# modify the clinical data frame 'subject_id' to match 'participant' string in enigma data frames
# replace the string prefix TAY01 with sub-
clinical_df$subject_id <- gsub("TAY01", "sub-", clinical_df$subject_id)
# remove the two underscores surrounding CMH
clinical_df$subject_id <- gsub("_CMH_","CMH", clinical_df$subject_id)
# rename the subject_id column heading 'participant' to match enigma data frames
clinical_df <- clinical_df %>% # need to specify where to store the new df
rename(participant = subject_id)
clinical_df
# Brain Age Gap = BAG = "age_prediction" - "Age"
# BAG refers to the difference between the age of individuals predicted by ENIGMA (brain age or "age_prediction") and their chronological age
# First calculate BAG for all participants and append BAG as a new column to the modified enigma data frame
# use the mutate() function to create a new variable BAG for "brain age gap"
enigma_BAG <- enigma_demo %>% mutate(BAG = age_prediction - Age)
enigma_BAG
# check if any participants have 'NA' values for 'Age'
na_count <- sum(is.na(enigma_demo$Age))
na_count
na_count2 <- sum(is.na(enigma_final$Age))
na_count2
# check if any participants have 'NA' values for 'dx' (diagnosis)
na_count_dx <- sum(is.na(enigma_final$dx))
na_count_dx
# create a new data frame that excludes participants that are missing dx information
enigma_dx <- enigma_BAG[complete.cases(enigma_BAG$dx), ]
enigma_dx
# check if any participants have 'NA' values for 'sex'
na_count_sex <- sum(is.na(enigma_final$sex))
na_count_sex
list_disorders <- list(colnames(clinical_df %>% select(ends_with("disorders"))))
list_disorders
# check type
class(list_disorders)
# convert list back to vector so that it can be passed through the mutate_at() function later on
list_disorders <- unlist(list_disorders, use.names=FALSE)
# check type again
class(list_disorders)
clinical_new <- clinical_df %>%
# replace NA values in the 12 disorder columns
# list_disorders has been passed through the unlist() function so it is no longer a list
mutate_at(c(list_disorders), ~replace_na(., 0))
# must put in the value 0 rather than the string "0" because the disorders columns are type "dbl" (numeric)
clinical_new
clinical_plus <- mutate(clinical_new, total_dx = (rowSums(clinical_new[, list_disorders])))
clinical_plus
enigma_BAG <- merge(enigma_BAG,
clinical_plus[c('participant', 'total_dx')], by ='participant', all.x = TRUE)
# merge by 'participant' column so that only the total disorders for participants in enigma_BAG AND clinical_df are merged
enigma_BAG
clinical_ASD <- filter(clinical_df, !is.na(asd_info_asd_ksads))
# there are 150 participants who have KSADS info, this suggests that one of the participants whose scan age was < 18 y/o does not have info for KSADS (which is why filtering for scan age < 18 returned 151 participants, whereas filtering for KSADS returned only 150)
clinical_ASD
clinical_ASD$asd_info_asd_ksads <- gsub("Yes - participant met criteria for ASD on the KSADS", "Yes", clinical_ASD$asd_info_asd_ksads)
clinical_ASD$asd_info_asd_ksads <- gsub("No - participant did not meet criteria for ASD on the KSADS", "No", clinical_ASD$asd_info_asd_ksads)
# replace the "insufficient info..." string with the string "No"
clinical_ASD$asd_info_asd_ksads <- gsub("Insufficient information - Participant was sub-threshold or query for ASD on the KSADS", "No", clinical_ASD$asd_info_asd_ksads)
# group participants that did not have enough information for ASD diagnosis using KSADS in the No ASD group
# rename the 'asd_info_asd_ksads' column heading to "ASD_dx"
clinical_ASD <- clinical_ASD %>% rename(ASD_dx = asd_info_asd_ksads)
clinical_ASD
enigma_ASD <- merge(enigma_BAG,
clinical_ASD[c('participant', 'ASD_dx')], by ='participant') # take the natural join so that only participants with data in both data frames (enigma_ASD and clinical_ASD) are added to the new data frame
enigma_ASD
write.csv(enigma_ASD, "/KIMEL/tigrlab/scratch/csun/ENIGMA_data/data/processed/enigma_ASD.csv", row.names = FALSE)
anti_join(clinical_ASD, enigma_BAG)
View(enigma_final)
ggplot(data = enigma_ASD, aes(x = age_prediction, y = Age, colour = ASD_dx)) +
geom_point() + geom_smooth()
ggplot(data = enigma_ASD, aes(x = age_prediction, y = Age, colour = ASD_dx)) +
geom_point()
t.test(BAG ~ ASD_dx, alternative = "two.sided", data = enigma_ASD)
